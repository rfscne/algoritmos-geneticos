{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled7.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPgbEgv0Zl5wURu4GhZLFDW",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/rfscne/algoritmos-geneticos/blob/main/ag_by_hand\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Wtqed6l2EMpC",
        "outputId": "58b2f8fe-b4a6-4368-e110-7dc6bb0692f1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: pymysql in /usr/local/lib/python3.7/dist-packages (1.0.2)\n",
            "Lista produtos:\n",
            "\n",
            "Individuo 1\n",
            "Nome: TV 55'  R$ 4346.99 \n",
            "Nome: Notebook Dell R$ 2499.9 \n",
            "Nome: Ventilador Panasonic R$ 1999.9 \n",
            "Nome: Microondas Electrolux R$ 308.66 \n",
            "Nome: Microondas LG R$ 429.9 \n",
            "Nome: Microondas Panasonic R$ 299.29 \n",
            "Nome: Geladeira Brastemp R$ 849.0 \n",
            "Nome: Geladeira Consul R$ 1199.89 \n",
            "Nome: Notebook Asus R$ 3999.0 \n",
            "Nota = 15932.529999999999\n",
            "Espaço usado = 3.0602\n",
            "\n",
            "Individuo 2\n",
            "Nome: Geladeira Dako R$ 999.9 \n",
            "Nome: Iphone 6 R$ 2911.12 \n",
            "Nome: TV 50'  R$ 3999.9 \n",
            "Nome: Ventilador Panasonic R$ 1999.9 \n",
            "Nome: Microondas Electrolux R$ 308.66 \n",
            "Nome: Microondas LG R$ 429.9 \n",
            "Nome: Microondas Panasonic R$ 299.29 \n",
            "Nome: Geladeira Consul R$ 1199.89 \n",
            "Nota = 12148.56\n",
            "Espaço usado = 2.5357899\n",
            "G:0 -> Valor: 25363.660000000003 Espaco: 2.4888898999999998 Cromossomo: ['0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1']\n",
            "G:1 -> Valor: 26363.560000000005 Espaco: 3.2398899000000005 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1']\n",
            "G:2 -> Valor: 26054.900000000005 Espaco: 3.1974899 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1']\n",
            "G:3 -> Valor: 25055.000000000004 Espaco: 2.4464899 Cromossomo: ['0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1']\n",
            "G:4 -> Valor: 25363.660000000003 Espaco: 2.4888898999999998 Cromossomo: ['0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1']\n",
            "G:5 -> Valor: 25363.660000000003 Espaco: 2.4888898999999998 Cromossomo: ['0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1']\n",
            "G:6 -> Valor: 26363.560000000005 Espaco: 3.2398899000000005 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1']\n",
            "G:7 -> Valor: 26363.560000000005 Espaco: 3.2398899000000005 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1']\n",
            "G:8 -> Valor: 25142.560000000005 Espaco: 3.9257899000000007 Cromossomo: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1']\n",
            "G:9 -> Valor: 25142.560000000005 Espaco: 3.9257899000000007 Cromossomo: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1']\n",
            "G:10 -> Valor: 25142.560000000005 Espaco: 3.9257899000000007 Cromossomo: ['1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0', '1', '1']\n",
            "G:11 -> Valor: 26054.900000000005 Espaco: 3.1974899 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1']\n",
            "G:12 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:13 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:14 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:15 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:16 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:17 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:18 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:19 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:20 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:21 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:22 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:23 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:24 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:25 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:26 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:27 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:28 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:29 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:30 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:31 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:32 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:33 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:34 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:35 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:36 -> Valor: 27333.800000000007 Espaco: 3.8868899 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1']\n",
            "G:37 -> Valor: 27343.170000000006 Espaco: 3.8973899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1']\n",
            "G:38 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:39 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:40 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:41 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:42 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:43 -> Valor: 27642.460000000006 Espaco: 3.9292899000000006 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1']\n",
            "G:44 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:45 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:46 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:47 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:48 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:49 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:50 -> Valor: 27212.560000000005 Espaco: 3.8748899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:51 -> Valor: 26793.460000000006 Espaco: 3.2942899 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:52 -> Valor: 26064.270000000004 Espaco: 3.2079899000000003 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '0', '1', '1']\n",
            "G:53 -> Valor: 26494.170000000006 Espaco: 3.2623899000000005 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '0', '0', '1', '1']\n",
            "G:54 -> Valor: 26054.900000000005 Espaco: 3.1974899 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1']\n",
            "G:55 -> Valor: 26054.900000000005 Espaco: 3.1974899 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '0', '0', '1', '0', '0', '1', '1']\n",
            "G:56 -> Valor: 22793.56 Espaco: 3.0042899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:57 -> Valor: 22793.56 Espaco: 3.0042899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:58 -> Valor: 22793.56 Espaco: 3.0042899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:59 -> Valor: 23642.56 Espaco: 3.6392899000000005 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1']\n",
            "G:60 -> Valor: 22993.550000000003 Espaco: 3.1232898999999996 Cromossomo: ['0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:61 -> Valor: 22793.56 Espaco: 3.0042899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:62 -> Valor: 22793.56 Espaco: 3.0042899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:63 -> Valor: 22793.56 Espaco: 3.0042899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:64 -> Valor: 22793.56 Espaco: 3.0042899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:65 -> Valor: 22793.56 Espaco: 3.0042899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:66 -> Valor: 21793.66 Espaco: 2.2532899 Cromossomo: ['0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:67 -> Valor: 22793.56 Espaco: 3.0042899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:68 -> Valor: 23212.660000000003 Espaco: 3.5848899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:69 -> Valor: 22793.56 Espaco: 3.0042899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '0', '1', '1']\n",
            "G:70 -> Valor: 22363.66 Espaco: 2.9498899000000005 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1']\n",
            "G:71 -> Valor: 23563.550000000003 Espaco: 3.8198899000000006 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1']\n",
            "G:72 -> Valor: 22363.66 Espaco: 2.9498899000000005 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '0', '0', '1', '1']\n",
            "G:73 -> Valor: 22642.660000000003 Espaco: 2.8882899 Cromossomo: ['0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1']\n",
            "G:74 -> Valor: 23642.56 Espaco: 3.6392899000000005 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1']\n",
            "G:75 -> Valor: 23993.45 Espaco: 3.8742899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:76 -> Valor: 23993.45 Espaco: 3.8742899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:77 -> Valor: 23993.45 Espaco: 3.8742899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:78 -> Valor: 23993.45 Espaco: 3.8742899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:79 -> Valor: 23993.45 Espaco: 3.8742899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:80 -> Valor: 24412.550000000003 Espaco: 4.4548899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1']\n",
            "G:81 -> Valor: 24412.550000000003 Espaco: 4.4548899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1']\n",
            "G:82 -> Valor: 24412.550000000003 Espaco: 4.4548899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1']\n",
            "G:83 -> Valor: 23212.660000000003 Espaco: 3.5848899000000003 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1']\n",
            "G:84 -> Valor: 23993.45 Espaco: 3.8742899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:85 -> Valor: 23993.45 Espaco: 3.8742899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:86 -> Valor: 23993.45 Espaco: 3.8742899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:87 -> Valor: 24412.550000000003 Espaco: 4.4548899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1']\n",
            "G:88 -> Valor: 24412.550000000003 Espaco: 4.4548899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1']\n",
            "G:89 -> Valor: 24412.550000000003 Espaco: 4.4548899 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1']\n",
            "G:90 -> Valor: 24842.45 Espaco: 4.509289900000001 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']\n",
            "G:91 -> Valor: 24842.45 Espaco: 4.509289900000001 Cromossomo: ['1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']\n",
            "G:92 -> Valor: 26842.450000000004 Espaco: 4.3032899 Cromossomo: ['1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1']\n",
            "G:93 -> Valor: 25993.450000000004 Espaco: 3.6682899000000004 Cromossomo: ['1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:94 -> Valor: 25993.450000000004 Espaco: 3.6682899000000004 Cromossomo: ['1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:95 -> Valor: 25993.450000000004 Espaco: 3.6682899000000004 Cromossomo: ['1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1']\n",
            "G:96 -> Valor: 28842.350000000006 Espaco: 4.799289900000001 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']\n",
            "G:97 -> Valor: 28842.350000000006 Espaco: 4.799289900000001 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']\n",
            "G:98 -> Valor: 28842.350000000006 Espaco: 4.799289900000001 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']\n",
            "G:99 -> Valor: 28842.350000000006 Espaco: 4.799289900000001 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']\n",
            "G:100 -> Valor: 28842.350000000006 Espaco: 4.799289900000001 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']\n",
            "\n",
            "Melhor solucao->:G: 96 Valor: 28842.350000000006 Espaco: 4.799289900000001 Cromossomo: ['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']\n",
            "Nome: Geladeira Dako R$ 999.9 \n",
            "Nome: Iphone 6 R$ 2911.12 \n",
            "Nome: TV 55'  R$ 4346.99 \n",
            "Nome: TV 50'  R$ 3999.9 \n",
            "Nome: TV 42'  R$ 2999.0 \n",
            "Nome: Notebook Dell R$ 2499.9 \n",
            "Nome: Ventilador Panasonic R$ 1999.9 \n",
            "Nome: Microondas Electrolux R$ 308.66 \n",
            "Nome: Microondas LG R$ 429.9 \n",
            "Nome: Microondas Panasonic R$ 299.29 \n",
            "Nome: Geladeira Brastemp R$ 849.0 \n",
            "Nome: Geladeira Consul R$ 1199.89 \n",
            "Nome: Notebook Lenovo R$ 1999.9 \n",
            "Nome: Notebook Asus R$ 3999.0 \n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "#ag by hand para planejamento de envio de cargas \n",
        "from random import random\n",
        "from random import seed\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "!pip install pymysql\n",
        "import pymysql\n",
        "\n",
        "#seed(1)\n",
        "class Produto(): \n",
        "    def __init__(self, nome, espaco, valor):\n",
        "        self.nome = nome\n",
        "        self.espaco = espaco\n",
        "        self.valor = valor\n",
        "        \n",
        "class Individuo():\n",
        "\n",
        "    def __init__ (self, espacos, valores, limite_espacos, geracao=0):\n",
        "        self.espacos = espacos\n",
        "        self.valores = valores\n",
        "        self.limite_espacos = limite_espacos\n",
        "        self.nota_avaliacao = 0\n",
        "        self.espaco_usado = 0\n",
        "        self.geracao = geracao\n",
        "        self.cromossomo = []\n",
        "        \n",
        "        for i in range(len(espacos)):\n",
        "            if random() < 0.5:\n",
        "                self.cromossomo.append(\"0\")\n",
        "            else: \n",
        "                self.cromossomo.append(\"1\")\n",
        "     \n",
        "    def avaliacao(self):\n",
        "        nota = 0\n",
        "        soma_espacos = 0\n",
        "        for i in range(len(self.cromossomo)):\n",
        "            if self.cromossomo[i] == '1':\n",
        "                nota += self.valores[i]\n",
        "                soma_espacos += self.espacos[i]\n",
        "        if soma_espacos > self.limite_espacos:\n",
        "            nota = 1\n",
        "        self.nota_avaliacao = nota\n",
        "        self.espaco_usado = soma_espacos\n",
        "      \n",
        "    def crossover(self, outro_individuo):\n",
        "        corte = round(random() * len(self.cromossomo))\n",
        "        filho1 = outro_individuo.cromossomo[0:corte] +self.cromossomo[corte::]\n",
        "        filho2 = self.cromossomo[0:corte]+ outro_individuo.cromossomo[corte::]\n",
        "        \n",
        "        filhos = [Individuo(self.espacos, self.valores, self.limite_espacos, self.geracao +1 ),\n",
        "                  Individuo(self.espacos, self.valores, self.limite_espacos, self.geracao +1) ]\n",
        "        \n",
        "        filhos[0].cromossomo = filho1\n",
        "        filhos[1].cromossomo = filho2\n",
        "        return filhos                    \n",
        "      \n",
        "    def mutacao(self, taxa_mutacao):\n",
        "     #   print(\"Antes %s \" % self.cromossomo)\n",
        "        for i in range(len(self.cromossomo)):\n",
        "            if random() < taxa_mutacao:\n",
        "                if self.cromossomo[i] == '1':\n",
        "                    self.cromossomo[i] = '0'\n",
        "                else: \n",
        "                    self.cromossomo[i] = '1'\n",
        "    #    print(\"Depois %s \" % self.cromossomo)\n",
        "        return self\n",
        " \n",
        "class AlgoritmoGenetico():\n",
        "    def __init__(self, tamanho_populacao):\n",
        "        self.tamanho_populacao = tamanho_populacao\n",
        "        self.populacao = []\n",
        "        self.geracao = 0\n",
        "        self.melhor_solucao = 0\n",
        "        self.lista_solucoes = []\n",
        "        \n",
        "    def inicializa_populacao(self, espacos, valores, limite_espacos):\n",
        "        for i in range(self.tamanho_populacao):\n",
        "            self.populacao.append(Individuo(espacos, valores, limite_espacos))\n",
        "        self.melhor_solucao = self.populacao[0] \n",
        " \n",
        "    def ordena_populacao(self):\n",
        "        self.populacao = sorted(self.populacao, \n",
        "                                key = lambda populacao: populacao.nota_avaliacao, \n",
        "                                reverse = True)\n",
        "    \n",
        "    def melhor_individuo(self, individuo):\n",
        "        if individuo.nota_avaliacao > self.melhor_solucao.nota_avaliacao:\n",
        "            self.melhor_solucao = individuo\n",
        "    \n",
        "    def soma_avaliacoes(self):\n",
        "        soma = 0\n",
        "        for individuo in self.populacao: \n",
        "            soma += individuo.nota_avaliacao\n",
        "        return soma\n",
        "    \n",
        "    def seleciona_pai(self, soma_avaliacao):\n",
        "        pai = -1\n",
        "        valor_sorteado = random() * soma_avaliacao\n",
        "        soma = 0\n",
        "        i = 0 \n",
        "        while i < len(self.populacao) and soma < valor_sorteado:\n",
        "            soma += self.populacao[i].nota_avaliacao\n",
        "            pai += 1\n",
        "            i += 1\n",
        "        return pai\n",
        "    \n",
        "    def visualiza_geracao(self):\n",
        "        melhor = self.populacao[0]\n",
        "        print(\"G:%s -> Valor: %s Espaco: %s Cromossomo: %s\" \n",
        "              %(self.populacao[0].geracao,\n",
        "                melhor.nota_avaliacao,\n",
        "                melhor.espaco_usado,\n",
        "                melhor.cromossomo))\n",
        "      \n",
        "    \n",
        "    def resolver(self, taxa_mutacao, numero_geracoes, espacos, valores, limite_espacos):\n",
        "        self.inicializa_populacao(espacos, valores, limite_espacos)\n",
        "        for individuo in self.populacao:\n",
        "            individuo.avaliacao()\n",
        "        self.ordena_populacao()\n",
        "        \n",
        "        self.melhor_solucao = self.populacao[0]\n",
        "        self.lista_solucoes.append(self.melhor_solucao.nota_avaliacao)\n",
        "        \n",
        "        self.visualiza_geracao()\n",
        "        \n",
        "        for geracao in range(numero_geracoes):\n",
        "            soma_avaliacao = self.soma_avaliacoes()\n",
        "            nova_populacao = []\n",
        "            for individuos_gerados in range(0, self.tamanho_populacao, 2):\n",
        "                pai1 = self.seleciona_pai(soma_avaliacao)\n",
        "                pai2 = self.seleciona_pai(soma_avaliacao)\n",
        "                filhos = self.populacao[pai1].crossover(self.populacao[pai2])\n",
        "                \n",
        "                nova_populacao.append(filhos[0].mutacao(taxa_mutacao))\n",
        "                nova_populacao.append(filhos[1].mutacao(taxa_mutacao))\n",
        "            self.populacao = list(nova_populacao)\n",
        "            for individuo in self.populacao: \n",
        "                individuo.avaliacao()\n",
        "                \n",
        "            self.ordena_populacao()\n",
        "            \n",
        "            self.visualiza_geracao()\n",
        "         \n",
        "            melhor = self.populacao[0] \n",
        "            self.lista_solucoes.append(melhor.nota_avaliacao)\n",
        "  \n",
        "            self.melhor_individuo(melhor)\n",
        "        \n",
        "        print(\"\\nMelhor solucao->:G: %s Valor: %s Espaco: %s Cromossomo: %s\" %\n",
        "              (self.melhor_solucao.geracao, \n",
        "               self.melhor_solucao.nota_avaliacao,\n",
        "               self.melhor_solucao.espaco_usado, \n",
        "               self.melhor_solucao.cromossomo))\n",
        "        return self.melhor_solucao.cromossomo      \n",
        "            \n",
        "if __name__ == '__main__':\n",
        "   # p1 = Produto('Iphone 6', 0.0000899, 2199.12)\n",
        "   lista_produtos =[] \n",
        "   lista_produtos.append(Produto(\"Geladeira Dako\", 0.751, 999.90 ))\n",
        "   lista_produtos.append(Produto(\"Iphone 6\", 0.0000899, 2911.12 ))\n",
        "   lista_produtos.append(Produto(\"TV 55' \", 0.400, 4346.99 ))\n",
        "   lista_produtos.append(Produto(\"TV 50' \", 0.290, 3999.90 ))\n",
        "   lista_produtos.append(Produto(\"TV 42' \", 0.200, 2999.00 ))\n",
        "   lista_produtos.append(Produto(\"Notebook Dell\", 0.00350, 2499.90 ))\n",
        "   lista_produtos.append(Produto(\"Ventilador Panasonic\", 0.496, 1999.90 ))\n",
        "   lista_produtos.append(Produto(\"Microondas Electrolux\", 0.0424,308.66 ))\n",
        "   lista_produtos.append(Produto(\"Microondas LG\", 0.0544, 429.90 ))\n",
        "   lista_produtos.append(Produto(\"Microondas Panasonic\", 0.0319, 299.29 ))\n",
        "   lista_produtos.append(Produto(\"Geladeira Brastemp\", 0.635, 849.00 ))\n",
        "   lista_produtos.append(Produto(\"Geladeira Consul\", 0.870, 1199.89 ))\n",
        "   lista_produtos.append(Produto(\"Notebook Lenovo\", 0.498, 1999.90 ))\n",
        "   lista_produtos.append(Produto(\"Notebook Asus\", 0.527, 3999.00 )) \n",
        "   \n",
        "   print ('Lista produtos:')\n",
        "   '''\n",
        "   conexao = pymysql.connect(host='localhost:3306', user='root', \n",
        "                            passwd='1Curitiba2', db='produtos')\n",
        "   cursor = conexao.cursor()\n",
        "   cursor.execute('select nome, espaco, valor, quantidade from produtos')\n",
        "   for produto in cursor: \n",
        "       #print(produto[1])\n",
        "       for i in range(produto[3]): #cria objetos de acordo com o atributo de quantidade\n",
        "           lista_produtos.append(Produto(produto[0], produto[1], produto[2]))\n",
        "   cursor.close()\n",
        "   conexao.close() '''\n",
        "   \n",
        "   #for produto in lista_produtos:\n",
        "   #    print(produto.nome)\n",
        "   \n",
        "   espacos = []\n",
        "   valores = []\n",
        "   nomes = []\n",
        "   for produto in lista_produtos:\n",
        "       espacos.append(produto.espaco)\n",
        "       valores.append(produto.valor)\n",
        "       nomes.append(produto.nome)\n",
        "   limite = 10\n",
        "\n",
        "   \n",
        "   individuo1 = Individuo(espacos, valores, limite)\n",
        "   #print(\"Espacos = %s\" % str(individuo1.espacos))\n",
        "   #print(\"Valores = %s\" % str(individuo1.valores))\n",
        "   #print(\"Cromossomo = %s\" % str(individuo1.cromossomo))   \n",
        "   \n",
        "   print(\"\\nIndividuo 1\")\n",
        "   \n",
        "  # print(\"\\Componentes de carga\")    \n",
        "   for i in range(len(lista_produtos)):\n",
        "       if individuo1.cromossomo[i] == '1':\n",
        "           print(\"Nome: %s R$ %s \" % (lista_produtos[i].nome, lista_produtos[i].valor))\n",
        "\n",
        "   individuo1.avaliacao()\n",
        "   print(\"Nota = %s\" % individuo1.nota_avaliacao)\n",
        "   print(\"Espaço usado = %s\" % individuo1.espaco_usado)\n",
        "   \n",
        "\n",
        "   individuo2 = Individuo(espacos, valores, limite)\n",
        "    \n",
        "   print(\"\\nIndividuo 2\")\n",
        "   for i in range(len(lista_produtos)):\n",
        "       if individuo2.cromossomo[i] == '1':\n",
        "           print(\"Nome: %s R$ %s \" % (lista_produtos[i].nome, lista_produtos[i].valor))\n",
        "\n",
        "   individuo2.avaliacao()\n",
        "   print(\"Nota = %s\" % individuo2.nota_avaliacao)\n",
        "   print(\"Espaço usado = %s\" % individuo2.espaco_usado)   \n",
        "   \n",
        "   filhos_teste = individuo1.crossover(individuo2)\n",
        "   \n",
        "   individuo1.mutacao(0.05)\n",
        "   individuo2.mutacao(0.05)\n",
        "   \n",
        "   tamanho_populacao = 20\n",
        "   taxa_mutacao = 0.01\n",
        "   numero_geracoes = 100\n",
        "   ag = AlgoritmoGenetico(tamanho_populacao)\n",
        "   resultado = ag.resolver(taxa_mutacao,  numero_geracoes, espacos, valores, limite)\n",
        "   \n",
        "   for i in range(len(lista_produtos)):\n",
        "       if resultado[i] == '1':\n",
        "           print(\"Nome: %s R$ %s \" %\n",
        "                 (lista_produtos[i].nome, \n",
        "                  lista_produtos[i].valor))\n",
        "   \n",
        "   \n",
        "   plt.plot(ag.lista_solucoes)\n",
        "   plt.title(\"Acompanhamento dos valores\")\n",
        "   plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "sOzvrWKuETnO"
      },
      "execution_count": 11,
      "outputs": []
    }
  ]
}